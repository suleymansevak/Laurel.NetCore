{"ast":null,"code":"function TinyMask(pattern, options) {\n  var defaultOptions = {\n    translation: {\n      '9': function _(val) {\n        return val.replace(/[^0-9]+/g, '');\n      },\n      'A': function A(val) {\n        return val.replace(/[^a-zA-Z]+/g, '');\n      },\n      'S': function S(val) {\n        return val.replace(/[^a-zA-Z0-9]+/g, '');\n      },\n      '*': function _(val) {\n        return val;\n      }\n    },\n    invalidValues: [null, undefined, '']\n  };\n  var opt = options || {};\n  this._options = {\n    translation: Object.assign(defaultOptions.translation, opt.translation),\n    invalidValues: Object.assign(defaultOptions.invalidValues, opt.invalidValues),\n    pattern: pattern\n  };\n  this._handlers = [];\n\n  for (var i = 0; i < pattern.length; i++) {\n    var element = pattern[i];\n    var result = this._options.translation[element] || element;\n\n    this._handlers.push(result);\n  }\n}\n\n;\n\nTinyMask.prototype._isString = function (value) {\n  return typeof value === \"string\";\n};\n\nTinyMask.prototype.mask = function (value) {\n  var result = '';\n  var val = String(value);\n  if (val.length === 0) return;\n  var maskSize = this._handlers.length;\n  var maskResolved = 0;\n  var valueSize = val.length;\n  var valueResolved = 0;\n\n  while (maskResolved < maskSize) {\n    var hand = this._handlers[maskResolved];\n    var char = val[valueResolved];\n\n    if (char === undefined) {\n      break;\n    }\n\n    if (char === hand) {\n      result += char;\n      maskResolved++;\n      valueResolved++;\n      continue;\n    }\n\n    if (this._isString(hand)) {\n      result += hand;\n      maskResolved++;\n      continue;\n    }\n\n    var parsed = hand(char);\n\n    if (this._options.invalidValues.indexOf(parsed) < 0) {\n      result += parsed;\n      valueResolved++;\n    } else {\n      break;\n    }\n\n    maskResolved++;\n  }\n\n  return result;\n};\n\nmodule.exports = TinyMask;","map":null,"metadata":{},"sourceType":"script"}