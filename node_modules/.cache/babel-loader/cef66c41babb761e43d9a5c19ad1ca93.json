{"ast":null,"code":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.VMasker = factory();\n  }\n})(this, function () {\n  var DIGIT = \"9\",\n      ALPHA = \"A\",\n      ALPHANUM = \"S\",\n      BY_PASS_KEYS = [9, 16, 17, 18, 36, 37, 38, 39, 40, 91, 92, 93],\n      isAllowedKeyCode = function isAllowedKeyCode(keyCode) {\n    for (var i = 0, len = BY_PASS_KEYS.length; i < len; i++) {\n      if (keyCode == BY_PASS_KEYS[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n      mergeMoneyOptions = function mergeMoneyOptions(opts) {\n    opts = opts || {};\n    opts = {\n      precision: opts.hasOwnProperty(\"precision\") ? opts.precision : 2,\n      separator: opts.separator || \",\",\n      delimiter: opts.delimiter || \".\",\n      unit: opts.unit ? opts.unit + ' ' : \"\",\n      //unit: opts.unit && (opts.unit.replace(/[\\s]/g,'') + \" \") || \"\",\n      suffixUnit: opts.suffixUnit && \" \" + opts.suffixUnit.replace(/[\\s]/g, '') || \"\",\n      zeroCents: opts.zeroCents,\n      lastOutput: opts.lastOutput\n    };\n    opts.moneyPrecision = opts.zeroCents ? 0 : opts.precision;\n    return opts;\n  },\n      // Fill wildcards past index in output with placeholder\n  addPlaceholdersToOutput = function addPlaceholdersToOutput(output, index, placeholder) {\n    for (; index < output.length; index++) {\n      if (output[index] === DIGIT || output[index] === ALPHA || output[index] === ALPHANUM) {\n        output[index] = placeholder;\n      }\n    }\n\n    return output;\n  };\n\n  var VanillaMasker = function VanillaMasker(elements) {\n    this.elements = elements;\n  };\n\n  VanillaMasker.prototype.unbindElementToMask = function () {\n    for (var i = 0, len = this.elements.length; i < len; i++) {\n      this.elements[i].lastOutput = \"\";\n      this.elements[i].onkeyup = false;\n      this.elements[i].onkeydown = false;\n\n      if (this.elements[i].value.length) {\n        this.elements[i].value = this.elements[i].value.replace(/\\D/g, '');\n      }\n    }\n  };\n\n  VanillaMasker.prototype.bindElementToMask = function (maskFunction) {\n    var that = this,\n        onType = function onType(e) {\n      e = e || window.event;\n      var source = e.target || e.srcElement;\n\n      if (isAllowedKeyCode(e.keyCode)) {\n        setTimeout(function () {\n          that.opts.lastOutput = source.lastOutput;\n          source.value = VMasker[maskFunction](source.value, that.opts);\n          source.lastOutput = source.value;\n\n          if (source.setSelectionRange && that.opts.suffixUnit) {\n            source.setSelectionRange(source.value.length, source.value.length - that.opts.suffixUnit.length);\n          }\n        }, 0);\n      }\n    };\n\n    for (var i = 0, len = this.elements.length; i < len; i++) {\n      this.elements[i].lastOutput = \"\";\n      this.elements[i].onkeyup = onType;\n\n      if (this.elements[i].value.length) {\n        this.elements[i].value = VMasker[maskFunction](this.elements[i].value, this.opts);\n      }\n    }\n  };\n\n  VanillaMasker.prototype.maskMoney = function (opts) {\n    this.opts = mergeMoneyOptions(opts);\n    this.bindElementToMask(\"toMoney\");\n  };\n\n  VanillaMasker.prototype.maskNumber = function () {\n    this.opts = {};\n    this.bindElementToMask(\"toNumber\");\n  };\n\n  VanillaMasker.prototype.maskAlphaNum = function () {\n    this.opts = {};\n    this.bindElementToMask(\"toAlphaNumeric\");\n  };\n\n  VanillaMasker.prototype.maskPattern = function (pattern) {\n    this.opts = {\n      pattern: pattern\n    };\n    this.bindElementToMask(\"toPattern\");\n  };\n\n  VanillaMasker.prototype.unMask = function () {\n    this.unbindElementToMask();\n  };\n\n  var VMasker = function VMasker(el) {\n    if (!el) {\n      throw new Error(\"VanillaMasker: There is no element to bind.\");\n    }\n\n    var elements = \"length\" in el ? el.length ? el : [] : [el];\n    return new VanillaMasker(elements);\n  };\n\n  VMasker.toMoney = function (value, opts) {\n    opts = mergeMoneyOptions(opts);\n\n    if (opts.zeroCents) {\n      opts.lastOutput = opts.lastOutput || \"\";\n      var zeroMatcher = \"(\" + opts.separator + \"[0]{0,\" + opts.precision + \"})\",\n          zeroRegExp = new RegExp(zeroMatcher, \"g\"),\n          digitsLength = value.toString().replace(/[\\D]/g, \"\").length || 0,\n          lastDigitLength = opts.lastOutput.toString().replace(/[\\D]/g, \"\").length || 0;\n      value = value.toString().replace(zeroRegExp, \"\");\n\n      if (digitsLength < lastDigitLength) {\n        value = value.slice(0, value.length - 1);\n      }\n    }\n\n    var number = value.toString().replace(/[\\D]/g, \"\"),\n        clearDelimiter = new RegExp(\"^(0|\\\\\" + opts.delimiter + \")\"),\n        clearSeparator = new RegExp(\"(\\\\\" + opts.separator + \")$\"),\n        money = number.substr(0, number.length - opts.moneyPrecision),\n        masked = money.substr(0, money.length % 3),\n        cents = new Array(opts.precision + 1).join(\"0\");\n    money = money.substr(money.length % 3, money.length);\n\n    for (var i = 0, len = money.length; i < len; i++) {\n      if (i % 3 === 0) {\n        masked += opts.delimiter;\n      }\n\n      masked += money[i];\n    }\n\n    masked = masked.replace(clearDelimiter, \"\");\n    masked = masked.length ? masked : \"0\";\n\n    if (!opts.zeroCents) {\n      var beginCents = number.length - opts.precision,\n          centsValue = number.substr(beginCents, opts.precision),\n          centsLength = centsValue.length,\n          centsSliced = opts.precision > centsLength ? opts.precision : centsLength;\n      cents = (cents + centsValue).slice(-centsSliced);\n    }\n\n    var unitToApply = opts.unit[opts.unit.length - 1] === ' ' ? opts.unit.substring(0, opts.unit.length - 1) : opts.unit;\n    var output = unitToApply + masked + opts.separator + cents + opts.suffixUnit;\n    return output.replace(clearSeparator, \"\");\n  };\n\n  VMasker.toPattern = function (value, opts) {\n    var pattern = typeof opts === 'object' ? opts.pattern : opts,\n        patternChars = pattern.replace(/\\W/g, ''),\n        output = pattern.split(\"\"),\n        values = value.toString().replace(/\\W/g, \"\"),\n        charsValues = values.replace(/\\W/g, ''),\n        index = 0,\n        i,\n        outputLength = output.length,\n        placeholder = typeof opts === 'object' ? opts.placeholder : undefined;\n\n    for (i = 0; i < outputLength; i++) {\n      // Reached the end of input\n      if (index >= values.length) {\n        if (patternChars.length == charsValues.length) {\n          return output.join(\"\");\n        } else if (placeholder !== undefined && patternChars.length > charsValues.length) {\n          return addPlaceholdersToOutput(output, i, placeholder).join(\"\");\n        } else {\n          break;\n        }\n      } // Remaining chars in input\n      else {\n          if (output[i] === DIGIT && values[index].match(/[0-9]/) || output[i] === ALPHA && values[index].match(/[a-zA-Z]/) || output[i] === ALPHANUM && values[index].match(/[0-9a-zA-Z]/)) {\n            output[i] = values[index++];\n          } else if (output[i] === DIGIT || output[i] === ALPHA || output[i] === ALPHANUM) {\n            if (placeholder !== undefined) {\n              return addPlaceholdersToOutput(output, i, placeholder).join(\"\");\n            } else {\n              return output.slice(0, i).join(\"\");\n            }\n          }\n        }\n    }\n\n    return output.join(\"\").substr(0, i);\n  };\n\n  VMasker.toNumber = function (value) {\n    return value.toString().replace(/(?!^-)[^0-9]/g, \"\");\n  };\n\n  VMasker.toAlphaNumeric = function (value) {\n    return value.toString().replace(/[^a-z0-9 ]+/i, \"\");\n  };\n\n  return VMasker;\n});","map":null,"metadata":{},"sourceType":"script"}