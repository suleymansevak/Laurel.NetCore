{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) : typeof define === 'function' && define.amd ? define(['react'], factory) : global.ReactTextMask = factory(global.react);\n})(this, function (React) {\n  'use strict';\n\n  var React__default = 'default' in React ? React['default'] : React;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  } // import * as VanillaMasker from '../internal-dependencies/vanilla-masker';\n\n\n  var VMasker = require('./internal-dependencies/vanilla-masker.js');\n\n  var BaseMask =\n  /*#__PURE__*/\n  function () {\n    function BaseMask() {\n      _classCallCheck(this, BaseMask);\n    }\n\n    _createClass(BaseMask, [{\n      key: \"getVMasker\",\n      value: function getVMasker() {\n        return VMasker;\n      }\n    }, {\n      key: \"mergeSettings\",\n      value: function mergeSettings(obj1, obj2) {\n        var obj3 = {};\n\n        for (var attrname in obj1) {\n          obj3[attrname] = obj1[attrname];\n        }\n\n        for (var attrname in obj2) {\n          obj3[attrname] = obj2[attrname];\n        }\n\n        return obj3;\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        return maskedValue;\n      }\n    }, {\n      key: \"getDefaultValue\",\n      value: function getDefaultValue(value) {\n        if (value === undefined || value === null) {\n          return '';\n        }\n\n        return value;\n      }\n    }, {\n      key: \"removeNotNumbers\",\n      value: function removeNotNumbers(text) {\n        return text.replace(/[^0-9]+/g, '');\n      }\n    }, {\n      key: \"removeWhiteSpaces\",\n      value: function removeWhiteSpaces(text) {\n        return (text || '').replace(/\\s/g, '');\n      }\n    }]);\n\n    return BaseMask;\n  }();\n\n  var PHONE_8_MASK = '9999-9999';\n  var PHONE_9_MASK = '99999-9999';\n  var CEL_PHONE_SETTINGS = {\n    withDDD: true,\n    dddMask: '(99) '\n  };\n\n  var CelPhoneMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(CelPhoneMask, _BaseMask);\n\n    function CelPhoneMask() {\n      _classCallCheck(this, CelPhoneMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(CelPhoneMask).apply(this, arguments));\n    }\n\n    _createClass(CelPhoneMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings) {\n        var mask = this._getMask(value, settings);\n\n        return this.getVMasker().toPattern(value, mask);\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        return _get(_getPrototypeOf(CelPhoneMask.prototype), \"removeNotNumbers\", this).call(this, maskedValue);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        var valueToValidate = _get(_getPrototypeOf(CelPhoneMask.prototype), \"getDefaultValue\", this).call(this, value);\n\n        valueToValidate = this.getValue(value, settings);\n\n        var mask = this._getMask(value, settings);\n\n        return valueToValidate.length === mask.length;\n      }\n    }, {\n      key: \"_getMask\",\n      value: function _getMask(value, settings) {\n        var _this = this;\n\n        var mergedSettings = _get(_getPrototypeOf(CelPhoneMask.prototype), \"mergeSettings\", this).call(this, CEL_PHONE_SETTINGS, settings);\n\n        var numbers = _get(_getPrototypeOf(CelPhoneMask.prototype), \"removeNotNumbers\", this).call(this, value);\n\n        var mask = PHONE_8_MASK;\n\n        var use9DigitMask = function () {\n          if (mergedSettings.withDDD) {\n            var numbersDDD = _get(_getPrototypeOf(CelPhoneMask.prototype), \"removeNotNumbers\", _this).call(_this, mergedSettings.dddMask);\n\n            var remainingValueNumbers = numbers.substr(numbersDDD.length);\n            return remainingValueNumbers.length >= 9;\n          } else {\n            return numbers.length >= 9;\n          }\n        }();\n\n        if (use9DigitMask) {\n          mask = PHONE_9_MASK;\n        }\n\n        if (mergedSettings.withDDD) {\n          mask = \"\".concat(mergedSettings.dddMask).concat(mask);\n        }\n\n        return mask;\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'cel-phone';\n      }\n    }]);\n\n    return CelPhoneMask;\n  }(BaseMask);\n\n  var CPF_MASK = '999.999.999-99';\n\n  var validateCPF = function validateCPF(cpf) {\n    if (cpf == \"\") {\n      return true;\n    }\n\n    cpf = cpf.replace(/\\./gi, \"\").replace(/-/gi, \"\");\n    var isValid = true;\n    var sum;\n    var rest;\n    var i;\n    i = 0;\n    sum = 0;\n\n    if (cpf.length != 11 || cpf == \"00000000000\" || cpf == \"11111111111\" || cpf == \"22222222222\" || cpf == \"33333333333\" || cpf == \"44444444444\" || cpf == \"55555555555\" || cpf == \"66666666666\" || cpf == \"77777777777\" || cpf == \"88888888888\" || cpf == \"99999999999\") {\n      isValid = false;\n    }\n\n    for (i = 1; i <= 9; i++) {\n      sum = sum + parseInt(cpf.substring(i - 1, i)) * (11 - i);\n    }\n\n    rest = sum * 10 % 11;\n\n    if (rest == 10 || rest == 11) {\n      rest = 0;\n    }\n\n    if (rest != parseInt(cpf.substring(9, 10))) {\n      isValid = false;\n    }\n\n    sum = 0;\n\n    for (i = 1; i <= 10; i++) {\n      sum = sum + parseInt(cpf.substring(i - 1, i)) * (12 - i);\n    }\n\n    rest = sum * 10 % 11;\n\n    if (rest == 10 || rest == 11) {\n      rest = 0;\n    }\n\n    if (rest != parseInt(cpf.substring(10, 11))) {\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  var CpfMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(CpfMask, _BaseMask);\n\n    function CpfMask() {\n      _classCallCheck(this, CpfMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(CpfMask).apply(this, arguments));\n    }\n\n    _createClass(CpfMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings) {\n        return this.getVMasker().toPattern(value, CPF_MASK);\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        return _get(_getPrototypeOf(CpfMask.prototype), \"removeNotNumbers\", this).call(this, maskedValue);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        return validateCPF(value);\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'cpf';\n      }\n    }]);\n\n    return CpfMask;\n  }(BaseMask);\n\n  var CREDIT_CARD_MASK = '9999 9999 9999 9999';\n  var CREDIT_CARD_OBFUSCATED_MASK = '9999 **** **** 9999';\n  var CREDIT_CARD_SETTINGS = {\n    obfuscated: false\n  };\n\n  var CreditCardMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(CreditCardMask, _BaseMask);\n\n    function CreditCardMask() {\n      _classCallCheck(this, CreditCardMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(CreditCardMask).apply(this, arguments));\n    }\n\n    _createClass(CreditCardMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings) {\n        var selectedMask = this._getMask(settings);\n\n        return this.getVMasker().toPattern(value, selectedMask);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        if (!!value) {\n          var selectedMask = this._getMask(settings);\n\n          return value.length === selectedMask.length;\n        }\n\n        return true;\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        if (!maskedValue) return [];\n        return maskedValue.split(' ').map(function (val) {\n          if (!val) return '';\n          return val.trim();\n        });\n      }\n    }, {\n      key: \"_getMask\",\n      value: function _getMask(settings) {\n        var mergedSettings = _get(_getPrototypeOf(CreditCardMask.prototype), \"mergeSettings\", this).call(this, CREDIT_CARD_SETTINGS, settings);\n\n        var selectedMask = mergedSettings.obfuscated ? CREDIT_CARD_OBFUSCATED_MASK : CREDIT_CARD_MASK;\n        return selectedMask;\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'credit-card';\n      }\n    }]);\n\n    return CreditCardMask;\n  }(BaseMask);\n\n  var TinyMask = require('tinymask');\n\n  var DEFAULT_TRANSLATION = {\n    '9': function _(val) {\n      return val.replace(/[^0-9]+/g, '');\n    },\n    'A': function A(val) {\n      return val.replace(/[^a-zA-Z]+/g, '');\n    },\n    'S': function S(val) {\n      return val.replace(/[^a-zA-Z0-9]+/g, '');\n    },\n    '*': function _(val) {\n      return val;\n    }\n  };\n\n  var CustomMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(CustomMask, _BaseMask);\n\n    function CustomMask() {\n      _classCallCheck(this, CustomMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(CustomMask).apply(this, arguments));\n    }\n\n    _createClass(CustomMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings) {\n        if (value === '') {\n          return value;\n        }\n\n        var mask = settings.mask;\n        var translation = this.mergeSettings(DEFAULT_TRANSLATION, settings.translation);\n        var masked = new TinyMask(mask, {\n          translation: translation\n        }).mask(value);\n        return masked;\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        if (!!settings && settings.getRawValue) {\n          return settings.getRawValue(maskedValue, settings);\n        }\n\n        return maskedValue;\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        if (!!settings && settings.validator) {\n          return settings.validator(value, settings);\n        }\n\n        return true;\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'custom';\n      }\n    }]);\n\n    return CustomMask;\n  }(BaseMask);\n\n  var _require = require('./internal-dependencies/date-parser.js'),\n      parseStringDate = _require.parseStringDate;\n\n  var DATETIME_MASK_SETTINGS = {\n    format: 'DD/MM/YYYY HH:mm:ss'\n  };\n\n  var DatetimeMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(DatetimeMask, _BaseMask);\n\n    function DatetimeMask() {\n      _classCallCheck(this, DatetimeMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(DatetimeMask).apply(this, arguments));\n    }\n\n    _createClass(DatetimeMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings) {\n        var mergedSettings = this._getMergedSettings(settings);\n\n        var mask = '';\n\n        for (var i = 0; i < mergedSettings.format.length; i++) {\n          mask += mergedSettings.format[i].replace(/[a-zA-Z]+/g, '9');\n        }\n\n        return this.getVMasker().toPattern(value, mask);\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        var mergedSettings = this._getMergedSettings(settings);\n\n        return parseStringDate(maskedValue, mergedSettings.format);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        var maskedValue = this.getValue(value, settings);\n\n        var mergedSettings = this._getMergedSettings(settings);\n\n        var date = parseStringDate(maskedValue, mergedSettings.format);\n\n        var isValid = this._isValidDate(date);\n\n        return isValid;\n      }\n    }, {\n      key: \"_getMergedSettings\",\n      value: function _getMergedSettings(settings) {\n        return _get(_getPrototypeOf(DatetimeMask.prototype), \"mergeSettings\", this).call(this, DATETIME_MASK_SETTINGS, settings);\n      }\n      /** https://stackoverflow.com/a/1353711/3670829 */\n\n    }, {\n      key: \"_isValidDate\",\n      value: function _isValidDate(d) {\n        return d instanceof Date && !isNaN(d);\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'datetime';\n      }\n    }]);\n\n    return DatetimeMask;\n  }(BaseMask);\n\n  var MONEY_MASK_SETTINGS = {\n    precision: 2,\n    separator: ',',\n    delimiter: '.',\n    unit: 'R$',\n    suffixUnit: '',\n    zeroCents: false\n  };\n\n  var MoneyMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(MoneyMask, _BaseMask);\n\n    function MoneyMask() {\n      _classCallCheck(this, MoneyMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MoneyMask).apply(this, arguments));\n    }\n\n    _createClass(MoneyMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings, oldValue) {\n        var mergedSettings = _get(_getPrototypeOf(MoneyMask.prototype), \"mergeSettings\", this).call(this, MONEY_MASK_SETTINGS, settings);\n\n        if (mergedSettings.suffixUnit && oldValue && value) {\n          // value: 123 R\n          // oldValue: 123 R$\n          if (value.length == oldValue.length - 1) {\n            var cleared = this.removeNotNumbers(value);\n            value = cleared.substr(0, cleared.length - 1);\n          }\n        }\n\n        var masked = this.getVMasker().toMoney(value, mergedSettings);\n        return masked;\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        var mergedSettings = _get(_getPrototypeOf(MoneyMask.prototype), \"mergeSettings\", this).call(this, MONEY_MASK_SETTINGS, settings);\n\n        var normalized = _get(_getPrototypeOf(MoneyMask.prototype), \"removeNotNumbers\", this).call(this, maskedValue);\n\n        var dotPosition = normalized.length - mergedSettings.precision;\n        normalized = this._insert(normalized, dotPosition, '.');\n        return Number(normalized);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        return true;\n      }\n    }, {\n      key: \"_insert\",\n      value: function _insert(text, index, string) {\n        if (index > 0) {\n          return text.substring(0, index) + string + text.substring(index, text.length);\n        } else {\n          return string + text;\n        }\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'money';\n      }\n    }]);\n\n    return MoneyMask;\n  }(BaseMask);\n\n  var OnlyNumbersMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(OnlyNumbersMask, _BaseMask);\n\n    function OnlyNumbersMask() {\n      _classCallCheck(this, OnlyNumbersMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(OnlyNumbersMask).apply(this, arguments));\n    }\n\n    _createClass(OnlyNumbersMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings) {\n        return this.getVMasker().toNumber(value);\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        return _get(_getPrototypeOf(OnlyNumbersMask.prototype), \"removeNotNumbers\", this).call(this, maskedValue);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        return true;\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'only-numbers';\n      }\n    }]);\n\n    return OnlyNumbersMask;\n  }(BaseMask);\n\n  var ZIP_CODE_MASK = '99999-999';\n\n  var ZipCodeMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(ZipCodeMask, _BaseMask);\n\n    function ZipCodeMask() {\n      _classCallCheck(this, ZipCodeMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(ZipCodeMask).apply(this, arguments));\n    }\n\n    _createClass(ZipCodeMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings) {\n        return this.getVMasker().toPattern(value, ZIP_CODE_MASK);\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        return _get(_getPrototypeOf(ZipCodeMask.prototype), \"removeNotNumbers\", this).call(this, maskedValue);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        if (!!value) {\n          return value.length === ZIP_CODE_MASK.length;\n        }\n\n        return true;\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'zip-code';\n      }\n    }]);\n\n    return ZipCodeMask;\n  }(BaseMask);\n\n  var CNPJ_MASK = '99.999.999/9999-99';\n\n  var validateCnpj = function validateCnpj(cnpj) {\n    var valida = new Array(6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2);\n    var dig1 = new Number();\n    var dig2 = new Number();\n    var i = 0;\n    var exp = /\\.|\\-|\\//g;\n    cnpj = cnpj.toString().replace(exp, \"\");\n    var digito = new Number(eval(cnpj.charAt(12) + cnpj.charAt(13)));\n\n    for (i = 0; i < valida.length; i++) {\n      dig1 += i > 0 ? cnpj.charAt(i - 1) * valida[i] : 0;\n      dig2 += cnpj.charAt(i) * valida[i];\n    }\n\n    dig1 = dig1 % 11 < 2 ? 0 : 11 - dig1 % 11;\n    dig2 = dig2 % 11 < 2 ? 0 : 11 - dig2 % 11;\n    return dig1 * 10 + dig2 == digito;\n  };\n\n  var CnpjMask =\n  /*#__PURE__*/\n  function (_BaseMask) {\n    _inherits(CnpjMask, _BaseMask);\n\n    function CnpjMask() {\n      _classCallCheck(this, CnpjMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(CnpjMask).apply(this, arguments));\n    }\n\n    _createClass(CnpjMask, [{\n      key: \"getValue\",\n      value: function getValue(value, settings) {\n        return this.getVMasker().toPattern(value, CNPJ_MASK);\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue(maskedValue, settings) {\n        return _get(_getPrototypeOf(CnpjMask.prototype), \"removeNotNumbers\", this).call(this, maskedValue);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(value, settings) {\n        return validateCnpj(value);\n      }\n    }], [{\n      key: \"getType\",\n      value: function getType() {\n        return 'cnpj';\n      }\n    }]);\n\n    return CnpjMask;\n  }(BaseMask);\n\n  var Masks =\n  /*#__PURE__*/\n  Object.freeze({\n    CelPhoneMask: CelPhoneMask,\n    CpfMask: CpfMask,\n    CreditCardMask: CreditCardMask,\n    CustomMask: CustomMask,\n    DatetimeMask: DatetimeMask,\n    MoneyMask: MoneyMask,\n    OnlyNumbersMask: OnlyNumbersMask,\n    ZipCodeMask: ZipCodeMask,\n    CnpjMask: CnpjMask\n  });\n  var maskKeys = Object.keys(Masks);\n\n  var MaskResolver =\n  /*#__PURE__*/\n  function () {\n    function MaskResolver() {\n      _classCallCheck(this, MaskResolver);\n    }\n\n    _createClass(MaskResolver, null, [{\n      key: \"resolve\",\n      value: function resolve(kind) {\n        var maskKey = maskKeys.filter(function (m) {\n          var handler = Masks[m];\n          return handler && handler.getType && handler.getType() === kind;\n        })[0];\n        var handler = Masks[maskKey];\n\n        if (!handler) {\n          throw new Error('Mask type not supported.');\n        }\n\n        return new handler();\n      }\n    }]);\n\n    return MaskResolver;\n  }();\n\n  var BaseTextComponent =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(BaseTextComponent, _Component);\n\n    function BaseTextComponent(props) {\n      var _this;\n\n      _classCallCheck(this, BaseTextComponent);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseTextComponent).call(this, props));\n\n      _this._resolveMaskHandler(props.kind);\n\n      var value = _this._getDefaultMaskedValue(props.defaultValue);\n\n      _this.state = {\n        value: value\n      };\n      return _this;\n    }\n\n    _createClass(BaseTextComponent, [{\n      key: \"shouldComponentUpdate\",\n      value: function shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.kind !== nextProps.kind) {\n          this._resolveMaskHandler(nextProps.kind);\n        }\n\n        return true;\n      }\n    }, {\n      key: \"updateValue\",\n      value: function updateValue(text) {\n        var _this2 = this;\n\n        var self = this;\n        return new Promise(function (resolve, reject) {\n          var maskedText = self._getMaskedValue(text);\n\n          if (self._isControlled()) {\n            resolve(maskedText);\n            return;\n          }\n\n          if (_this2.state.value == maskedText) {\n            resolve(_this2.state.value);\n            return;\n          }\n\n          self.setState({\n            value: maskedText\n          }, function () {\n            return resolve(maskedText);\n          });\n        });\n      }\n    }, {\n      key: \"isValid\",\n      value: function isValid() {\n        var value = this._isControlled() ? this.props.value : this.state.value;\n        return this._maskHandler.validate(this._getDefaultValue(value), this.state.options);\n      }\n    }, {\n      key: \"getRawValue\",\n      value: function getRawValue() {\n        var value = this._isControlled() ? this.props.value : this.state.value;\n        return this._maskHandler.getRawValue(this._getDefaultValue(value), this.state.options);\n      }\n    }, {\n      key: \"_isControlled\",\n      value: function _isControlled() {\n        return this.props.value !== undefined;\n      }\n    }, {\n      key: \"_resolveMaskHandler\",\n      value: function _resolveMaskHandler(kind) {\n        this._maskHandler = MaskResolver.resolve(kind);\n      }\n    }, {\n      key: \"_getDefaultMaskedValue\",\n      value: function _getDefaultMaskedValue(value) {\n        if (this._getDefaultValue(value) === '') {\n          return '';\n        }\n\n        return this._getMaskedValue(value);\n      }\n    }, {\n      key: \"_getMaskedValue\",\n      value: function _getMaskedValue(value) {\n        var oldValue = this.state && this.state.value;\n        return this._maskHandler.getValue(this._getDefaultValue(value), this.props.options, oldValue);\n      }\n    }, {\n      key: \"_getDefaultValue\",\n      value: function _getDefaultValue(value) {\n        if (value === undefined || value === null) {\n          return '';\n        }\n\n        return value;\n      }\n    }]);\n\n    return BaseTextComponent;\n  }(React.Component);\n\n  var TextInputMask =\n  /*#__PURE__*/\n  function (_BaseTextComponent) {\n    _inherits(TextInputMask, _BaseTextComponent);\n\n    function TextInputMask() {\n      _classCallCheck(this, TextInputMask);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(TextInputMask).apply(this, arguments));\n    }\n\n    _createClass(TextInputMask, [{\n      key: \"getElement\",\n      value: function getElement() {\n        return this._input;\n      }\n    }, {\n      key: \"_onChangeText\",\n      value: function _onChangeText(text) {\n        var self = this;\n\n        if (!this._checkText(text)) {\n          return;\n        }\n\n        self.updateValue(text).then(function (maskedText) {\n          if (self.props.onChangeText) {\n            self.props.onChangeText(maskedText);\n          }\n        });\n      }\n    }, {\n      key: \"_checkText\",\n      value: function _checkText(text) {\n        if (this.props.checkText) {\n          var value = this._isControlled() ? this.props.value : this.state.value;\n          return this.props.checkText(value, text);\n        }\n\n        return true;\n      }\n    }, {\n      key: \"_propsParsed\",\n      value: function _propsParsed(props) {\n        var newProps = props;\n        Object.keys(props).forEach(function (prop) {\n          if (typeof props[prop] === 'boolean') {\n            newProps[prop] = props[prop].toString();\n          }\n        });\n        return newProps;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this = this;\n\n        var _this$props = this.props,\n            defaultValue = _this$props.defaultValue,\n            value = _this$props.value,\n            onChange = _this$props.onChange,\n            onChangeText = _this$props.onChangeText,\n            otherProps = _objectWithoutProperties(_this$props, [\"defaultValue\", \"value\", \"onChange\", \"onChangeText\"]);\n\n        var parsedProps = this._propsParsed(otherProps);\n\n        var maskedValue = this._getDefaultMaskedValue(this._isControlled() ? value : this.state.value);\n\n        if (value !== undefined && defaultValue !== undefined) {\n          console.error(\"react-masked-text: ERROR - defaultValue and value shouldn't be set at the same time!\");\n        }\n\n        return React__default.createElement(\"input\", _extends({\n          ref: function ref(_ref) {\n            _this._input = _ref;\n          },\n          onChange: function onChange(event) {\n            return _this._onChangeText(event.currentTarget.value);\n          },\n          value: maskedValue\n        }, parsedProps));\n      }\n    }]);\n\n    return TextInputMask;\n  }(BaseTextComponent);\n\n  return TextInputMask;\n});","map":null,"metadata":{},"sourceType":"script"}